// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/currency/currency.proto

/*
Package currency is a generated protocol buffer package.

It is generated from these files:
	proto/currency/currency.proto

It has these top-level messages:
	CurrencyListRequest
	CurrencyListResponse
	CurrencyRequest
	CurrencyResponse
	PingRequest
	PongResponse
*/
package currency

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CurrencyListRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CurrencyListRequest) Reset()                    { *m = CurrencyListRequest{} }
func (m *CurrencyListRequest) String() string            { return proto.CompactTextString(m) }
func (*CurrencyListRequest) ProtoMessage()               {}
func (*CurrencyListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CurrencyListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CurrencyListResponse struct {
	List map[string]string `protobuf:"bytes,2,rep,name=list" json:"list,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CurrencyListResponse) Reset()                    { *m = CurrencyListResponse{} }
func (m *CurrencyListResponse) String() string            { return proto.CompactTextString(m) }
func (*CurrencyListResponse) ProtoMessage()               {}
func (*CurrencyListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CurrencyListResponse) GetList() map[string]string {
	if m != nil {
		return m.List
	}
	return nil
}

type CurrencyRequest struct {
	From string `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	To   string `protobuf:"bytes,4,opt,name=to" json:"to,omitempty"`
}

func (m *CurrencyRequest) Reset()                    { *m = CurrencyRequest{} }
func (m *CurrencyRequest) String() string            { return proto.CompactTextString(m) }
func (*CurrencyRequest) ProtoMessage()               {}
func (*CurrencyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CurrencyRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CurrencyRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type CurrencyResponse struct {
	Exchange   float64 `protobuf:"fixed64,5,opt,name=exchange" json:"exchange,omitempty"`
	UpdateTime string  `protobuf:"bytes,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *CurrencyResponse) Reset()                    { *m = CurrencyResponse{} }
func (m *CurrencyResponse) String() string            { return proto.CompactTextString(m) }
func (*CurrencyResponse) ProtoMessage()               {}
func (*CurrencyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CurrencyResponse) GetExchange() float64 {
	if m != nil {
		return m.Exchange
	}
	return 0
}

func (m *CurrencyResponse) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PongResponse struct {
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
}

func (m *PongResponse) Reset()                    { *m = PongResponse{} }
func (m *PongResponse) String() string            { return proto.CompactTextString(m) }
func (*PongResponse) ProtoMessage()               {}
func (*PongResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PongResponse) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func init() {
	proto.RegisterType((*CurrencyListRequest)(nil), "CurrencyListRequest")
	proto.RegisterType((*CurrencyListResponse)(nil), "CurrencyListResponse")
	proto.RegisterType((*CurrencyRequest)(nil), "CurrencyRequest")
	proto.RegisterType((*CurrencyResponse)(nil), "CurrencyResponse")
	proto.RegisterType((*PingRequest)(nil), "PingRequest")
	proto.RegisterType((*PongResponse)(nil), "PongResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Currency service

type CurrencyClient interface {
	List(ctx context.Context, in *CurrencyListRequest, opts ...client.CallOption) (*CurrencyListResponse, error)
	Exchange(ctx context.Context, in *CurrencyRequest, opts ...client.CallOption) (*CurrencyResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...client.CallOption) (*PongResponse, error)
}

type currencyClient struct {
	c           client.Client
	serviceName string
}

func NewCurrencyClient(serviceName string, c client.Client) CurrencyClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "currency"
	}
	return &currencyClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *currencyClient) List(ctx context.Context, in *CurrencyListRequest, opts ...client.CallOption) (*CurrencyListResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Currency.List", in)
	out := new(CurrencyListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyClient) Exchange(ctx context.Context, in *CurrencyRequest, opts ...client.CallOption) (*CurrencyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Currency.Exchange", in)
	out := new(CurrencyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyClient) Ping(ctx context.Context, in *PingRequest, opts ...client.CallOption) (*PongResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Currency.Ping", in)
	out := new(PongResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Currency service

type CurrencyHandler interface {
	List(context.Context, *CurrencyListRequest, *CurrencyListResponse) error
	Exchange(context.Context, *CurrencyRequest, *CurrencyResponse) error
	Ping(context.Context, *PingRequest, *PongResponse) error
}

func RegisterCurrencyHandler(s server.Server, hdlr CurrencyHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Currency{hdlr}, opts...))
}

type Currency struct {
	CurrencyHandler
}

func (h *Currency) List(ctx context.Context, in *CurrencyListRequest, out *CurrencyListResponse) error {
	return h.CurrencyHandler.List(ctx, in, out)
}

func (h *Currency) Exchange(ctx context.Context, in *CurrencyRequest, out *CurrencyResponse) error {
	return h.CurrencyHandler.Exchange(ctx, in, out)
}

func (h *Currency) Ping(ctx context.Context, in *PingRequest, out *PongResponse) error {
	return h.CurrencyHandler.Ping(ctx, in, out)
}

func init() { proto.RegisterFile("proto/currency/currency.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x4f, 0xc2, 0x40,
	0x10, 0x85, 0xd9, 0x52, 0x08, 0x4c, 0x41, 0x71, 0xc5, 0x64, 0xd3, 0xc4, 0x80, 0x9b, 0x98, 0xe0,
	0x65, 0x89, 0x10, 0xa2, 0xf1, 0x6a, 0xb8, 0x19, 0x25, 0x8d, 0x77, 0x52, 0xeb, 0x88, 0x8d, 0xb4,
	0x8b, 0xed, 0x96, 0xc8, 0xdd, 0x3f, 0xe1, 0xbf, 0x35, 0x5d, 0x16, 0xac, 0xda, 0xdb, 0x7b, 0x2f,
	0xd3, 0x99, 0xaf, 0xaf, 0x85, 0xd3, 0x55, 0x22, 0x95, 0x1c, 0x06, 0x59, 0x92, 0x60, 0x1c, 0x6c,
	0xf6, 0x42, 0xe8, 0x9c, 0x5f, 0xc0, 0xf1, 0xad, 0x49, 0xee, 0xc2, 0x54, 0x79, 0xf8, 0x9e, 0x61,
	0xaa, 0x28, 0x05, 0x3b, 0xf6, 0x23, 0x64, 0xa4, 0x4f, 0x06, 0x4d, 0x4f, 0x6b, 0xfe, 0x49, 0xa0,
	0xfb, 0x7b, 0x36, 0x5d, 0xc9, 0x38, 0x45, 0x3a, 0x06, 0x7b, 0x19, 0xa6, 0x8a, 0x59, 0xfd, 0xea,
	0xc0, 0x19, 0xf5, 0x44, 0xd9, 0x90, 0xc8, 0xcd, 0x34, 0x56, 0xc9, 0xc6, 0xd3, 0xc3, 0xee, 0x15,
	0x34, 0xf7, 0x11, 0xed, 0x40, 0xf5, 0x0d, 0x37, 0xe6, 0x5a, 0x2e, 0x69, 0x17, 0x6a, 0x6b, 0x7f,
	0x99, 0x21, 0xb3, 0x74, 0xb6, 0x35, 0x37, 0xd6, 0x35, 0xe1, 0x13, 0x38, 0xdc, 0x1d, 0x28, 0xd0,
	0xbe, 0x24, 0x32, 0x62, 0xd5, 0x2d, 0x6d, 0xae, 0xe9, 0x01, 0x58, 0x4a, 0x32, 0x5b, 0x27, 0x96,
	0x92, 0xfc, 0x01, 0x3a, 0x3f, 0x8f, 0x19, 0x70, 0x17, 0x1a, 0xf8, 0x11, 0xbc, 0xfa, 0xf1, 0x02,
	0x59, 0xad, 0x4f, 0x06, 0xc4, 0xdb, 0x7b, 0xda, 0x03, 0x27, 0x5b, 0x3d, 0xfb, 0x0a, 0xe7, 0x2a,
	0x8c, 0x90, 0xd5, 0xf5, 0x22, 0xd8, 0x46, 0x8f, 0x61, 0x84, 0xbc, 0x0d, 0xce, 0x2c, 0x8c, 0x17,
	0x86, 0x81, 0x5f, 0x42, 0x6b, 0x26, 0x73, 0x6b, 0x76, 0x9f, 0x41, 0x2b, 0xc5, 0x64, 0x1d, 0x06,
	0x38, 0x2f, 0x34, 0xe9, 0x98, 0xec, 0xde, 0x8f, 0x70, 0xf4, 0x45, 0xa0, 0xb1, 0x63, 0xa2, 0x13,
	0xb0, 0xf3, 0x3e, 0x68, 0x57, 0x94, 0x7c, 0x0f, 0xf7, 0xa4, 0xb4, 0x54, 0x5e, 0xa1, 0x43, 0x68,
	0x4c, 0x77, 0xc8, 0x1d, 0xf1, 0xa7, 0x18, 0xf7, 0x48, 0xfc, 0x7b, 0xe7, 0x73, 0xb0, 0x73, 0x6c,
	0xda, 0x12, 0x05, 0x7a, 0xb7, 0x2d, 0x8a, 0xf0, 0xbc, 0xf2, 0x54, 0xd7, 0xbf, 0xc7, 0xf8, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0x93, 0xb2, 0xf5, 0x75, 0x3f, 0x02, 0x00, 0x00,
}
